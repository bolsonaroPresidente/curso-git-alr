-----------------------------------------
Commandos git
-----------------------------------------

-- log
git log
-- mostra as alterações do comit
git whatchange
git whatchange -p

--CONFIGURANDO REPOSITORIO LOCAL PARA ENVIAR OS ARQUIVOS PARA O REPOSITORIO REMOTO:

-- mostra os repositórios remotos que o repositorio local tem
git remote 

-- adiciona um repositório remoto
git remote add <nomeDoRepositorio> <urlDoRepositorioRemoto>
git remote add origin https://github.com/bolsonaroPresidente/casadocodigo.git

--enviando arquivos para o repositório remoto
git push 
-- 1º vez que envia é necessário configurar o nome do repositório e a branch para onde deve ser enviado (branch é como se fosse uma pasta para colocar os arquivos e o repositório como se fosse uma partição)
git push <nomeDoRepositorio> <branch>


-- recuperando arquivos do repositorio remoto para o repositorio local/ vai gravar uma pasta com o mesmo nome do repositorio remoto no local indicado
git clone <urlDoRepositorioRemoto>
cd /c/novo-workspace/pasta-para-clone
git clone https://github.com/bolsonaroPresidente/casadocodigo.git


-- branches

--mostra todas as branches do repositorio
git branch

--cria uma brabch
git branch <nome>

--muda de branch
git checkout <nomeBranch>

-enviando alterações  de uma branch para o repositorio
git push -u <nomeDoRepositorio> <nomeBranch>

--ver branches remotas
git branch -r

--obtendo branches que estão no repositório:
git pull

git branch -t <nomeBranchLocal> <nomeDoRepositorio>/<nomeBranchRemota>
git branch -t design origin/design


----------------------------------------------------
--Merge
----------------------------------------------------
quando o repositório local está diferente do repositório remoto, o git impede a execução do push e informa o motivo conforme este texto. Nesse caso, é necessário
obter o que há de diferente no repositório remoto e só depois efetuar o push com as SUAS alterações locais.
Para sincronizar o repositorio local com o remoto utilizamos o comando git pull:
-git pull <nomeDoRepositorio> <brabch>
-git pull origin master

--Merge sem conflito
Se no repositório remoto tiver alterações feitas por outro usuário no mesmo arquivo que vc efetuou mudanças ocorre o MERGE. Contudo se as mudanças não ocorrerem
nas mesmas linhas o git é esperto o suficiente para mescla-las automaticamente sem que haja a necessidade de interferencia humana.
O git abre um arquivinho com a mensagem informando 


--Conflitos no Merge
Contudo se ocorre conflito durante o merge, o git não apresenta o arquivinho informando que fará o merge das alterações, e dá uma mensagem de conflito
neste caso, temos que resolver os conflitos manualmente, 
- devemos abrir o arquivo apontado na mensagem de conflito;
    o git o terá marcado com as tags 
	    <<<<<<<<<< HEAD: Mostra como estava o repositório local antes de vc fazer o git pull
        ===============: é um divisor que mostra onde termina as alterções que já estavam no repositorio local e, onde começam as alterações que vieram do repositório remoto (abaixo) -> vc deve decidir qual das duas deverá prevalecer
        >>>>>>>>>> NÚMERO DO COMMIT: número do commit em que a alteração conflitante foi efetuada no repositorio remoto
  
-Para eliminar os conflitos basta apagar o as marcações e manter as alterações que vc julgar mais adequadas.
-após basta adicionar o arquivo com o comando add, pois isso indica para o git q vc já trabalhou no arquivo e ele está pronto para ser commitado.
-git add <arquivo>
-git commint -a 'mensagem'

após efetuar o merge com ou sem conflito, podemos comitar com o git push
-git push 

-- Merge entre Branch

Existem duas formas de se fazer mege entre branchs, são elas:
-Merge e Rebase

-Merge 



















































































